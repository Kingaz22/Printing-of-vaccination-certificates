// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrintCertVac.EntityFramework;

namespace PrintCertVac.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210622170040_ContractInt")]
    partial class ContractInt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("PrintCertVac.Model.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateRecord")
                        .HasColumnType("TEXT");

                    b.Property<string>("PartVac")
                        .HasColumnType("TEXT");

                    b.Property<string>("PartVac2")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("PrintCertVac.Model.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Incoming")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sale")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Spoiled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("PrintCertVac.Model.TemplateCert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateOfVaccination2FontSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateOfVaccination2Margin")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateOfVaccinationFontSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateOfVaccinationMargin")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameTemplate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TemplateCerts");
                });

            modelBuilder.Entity("PrintCertVac.Model.Certificate", b =>
                {
                    b.OwnsOne("PrintCertVac.Model.DateOfVaccination", "DateOfVaccination", b1 =>
                        {
                            b1.Property<int>("CertificateId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Date")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FontSize")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Margin")
                                .HasColumnType("TEXT");

                            b1.HasKey("CertificateId");

                            b1.ToTable("Certificates");

                            b1.WithOwner()
                                .HasForeignKey("CertificateId");
                        });

                    b.OwnsOne("PrintCertVac.Model.DateOfVaccination", "DateOfVaccination2", b1 =>
                        {
                            b1.Property<int>("CertificateId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Date")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FontSize")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Margin")
                                .HasColumnType("TEXT");

                            b1.HasKey("CertificateId");

                            b1.ToTable("Certificates");

                            b1.WithOwner()
                                .HasForeignKey("CertificateId");
                        });

                    b.OwnsOne("PrintCertVac.Model.Doctor", "Doctor", b1 =>
                        {
                            b1.Property<int>("CertificateId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("FontSize")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Margin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .HasColumnType("TEXT");

                            b1.HasKey("CertificateId");

                            b1.ToTable("Certificates");

                            b1.WithOwner()
                                .HasForeignKey("CertificateId");
                        });

                    b.OwnsOne("PrintCertVac.Model.Doctor", "Doctor2", b1 =>
                        {
                            b1.Property<int>("CertificateId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("FontSize")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Margin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .HasColumnType("TEXT");

                            b1.HasKey("CertificateId");

                            b1.ToTable("Certificates");

                            b1.WithOwner()
                                .HasForeignKey("CertificateId");
                        });

                    b.OwnsOne("PrintCertVac.Model.FirsPage", "FirsPage", b1 =>
                        {
                            b1.Property<int>("CertificateId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("NameOrgEng")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameOrgEngFontSize")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameOrgEngMargin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameOrgRus")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameOrgRusFontSize")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameOrgRusMargin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("QrCodeMargin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("QrCodeSize")
                                .HasColumnType("TEXT");

                            b1.HasKey("CertificateId");

                            b1.ToTable("Certificates");

                            b1.WithOwner()
                                .HasForeignKey("CertificateId");
                        });

                    b.OwnsOne("PrintCertVac.Model.User", "User", b1 =>
                        {
                            b1.Property<int>("CertificateId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("DateOfBirth")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FamilyNameEng")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FamilyNameRus")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("IdentNumber")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameEng")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameRus")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Passport")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("TEXT");

                            b1.HasKey("CertificateId");

                            b1.ToTable("Certificates");

                            b1.WithOwner()
                                .HasForeignKey("CertificateId");

                            b1.OwnsOne("PrintCertVac.Model.UserFontSize", "FontSize", b2 =>
                                {
                                    b2.Property<int>("UserCertificateId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("DateOfBirth")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("FamilyName")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("Id")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("IdentNumber")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Name")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Passport")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Patronymic")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("UserCertificateId");

                                    b2.ToTable("Certificates");

                                    b2.WithOwner()
                                        .HasForeignKey("UserCertificateId");
                                });

                            b1.OwnsOne("PrintCertVac.Model.UserMargin", "Margin", b2 =>
                                {
                                    b2.Property<int>("UserCertificateId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("DateOfBirth")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("FamilyName")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("Id")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("IdentNumber")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Name")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Passport")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Patronymic")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("UserCertificateId");

                                    b2.ToTable("Certificates");

                                    b2.WithOwner()
                                        .HasForeignKey("UserCertificateId");
                                });

                            b1.Navigation("FontSize");

                            b1.Navigation("Margin");
                        });

                    b.OwnsOne("PrintCertVac.Model.Vaccine", "Vaccine", b1 =>
                        {
                            b1.Property<int>("CertificateId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("FontSize")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Margin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameVacEng")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameVacRus")
                                .HasColumnType("TEXT");

                            b1.HasKey("CertificateId");

                            b1.ToTable("Certificates");

                            b1.WithOwner()
                                .HasForeignKey("CertificateId");
                        });

                    b.OwnsOne("PrintCertVac.Model.Vaccine", "Vaccine2", b1 =>
                        {
                            b1.Property<int>("CertificateId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("FontSize")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Margin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameVacEng")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameVacRus")
                                .HasColumnType("TEXT");

                            b1.HasKey("CertificateId");

                            b1.ToTable("Certificates");

                            b1.WithOwner()
                                .HasForeignKey("CertificateId");
                        });

                    b.Navigation("DateOfVaccination");

                    b.Navigation("DateOfVaccination2");

                    b.Navigation("Doctor");

                    b.Navigation("Doctor2");

                    b.Navigation("FirsPage");

                    b.Navigation("User");

                    b.Navigation("Vaccine");

                    b.Navigation("Vaccine2");
                });

            modelBuilder.Entity("PrintCertVac.Model.TemplateCert", b =>
                {
                    b.OwnsOne("PrintCertVac.Model.Doctor", "Doctor", b1 =>
                        {
                            b1.Property<int>("TemplateCertId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("FontSize")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Margin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .HasColumnType("TEXT");

                            b1.HasKey("TemplateCertId");

                            b1.ToTable("TemplateCerts");

                            b1.WithOwner()
                                .HasForeignKey("TemplateCertId");
                        });

                    b.OwnsOne("PrintCertVac.Model.Doctor", "Doctor2", b1 =>
                        {
                            b1.Property<int>("TemplateCertId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("FontSize")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Margin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .HasColumnType("TEXT");

                            b1.HasKey("TemplateCertId");

                            b1.ToTable("TemplateCerts");

                            b1.WithOwner()
                                .HasForeignKey("TemplateCertId");
                        });

                    b.OwnsOne("PrintCertVac.Model.FirsPage", "FirsPage", b1 =>
                        {
                            b1.Property<int>("TemplateCertId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("NameOrgEng")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameOrgEngFontSize")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameOrgEngMargin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameOrgRus")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameOrgRusFontSize")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameOrgRusMargin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("QrCodeMargin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("QrCodeSize")
                                .HasColumnType("TEXT");

                            b1.HasKey("TemplateCertId");

                            b1.ToTable("TemplateCerts");

                            b1.WithOwner()
                                .HasForeignKey("TemplateCertId");
                        });

                    b.OwnsOne("PrintCertVac.Model.UserFontSize", "UserFontSize", b1 =>
                        {
                            b1.Property<int>("TemplateCertId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("DateOfBirth")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FamilyName")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("IdentNumber")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Passport")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("TEXT");

                            b1.HasKey("TemplateCertId");

                            b1.ToTable("TemplateCerts");

                            b1.WithOwner()
                                .HasForeignKey("TemplateCertId");
                        });

                    b.OwnsOne("PrintCertVac.Model.UserMargin", "UserMargin", b1 =>
                        {
                            b1.Property<int>("TemplateCertId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("DateOfBirth")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FamilyName")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("IdentNumber")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Passport")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("TEXT");

                            b1.HasKey("TemplateCertId");

                            b1.ToTable("TemplateCerts");

                            b1.WithOwner()
                                .HasForeignKey("TemplateCertId");
                        });

                    b.OwnsOne("PrintCertVac.Model.Vaccine", "Vaccine", b1 =>
                        {
                            b1.Property<int>("TemplateCertId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("FontSize")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Margin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameVacEng")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameVacRus")
                                .HasColumnType("TEXT");

                            b1.HasKey("TemplateCertId");

                            b1.ToTable("TemplateCerts");

                            b1.WithOwner()
                                .HasForeignKey("TemplateCertId");
                        });

                    b.OwnsOne("PrintCertVac.Model.Vaccine", "Vaccine2", b1 =>
                        {
                            b1.Property<int>("TemplateCertId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("FontSize")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Margin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameVacEng")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NameVacRus")
                                .HasColumnType("TEXT");

                            b1.HasKey("TemplateCertId");

                            b1.ToTable("TemplateCerts");

                            b1.WithOwner()
                                .HasForeignKey("TemplateCertId");
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Doctor2");

                    b.Navigation("FirsPage");

                    b.Navigation("UserFontSize");

                    b.Navigation("UserMargin");

                    b.Navigation("Vaccine");

                    b.Navigation("Vaccine2");
                });
#pragma warning restore 612, 618
        }
    }
}
